{"version":3,"sources":["MDS.ts"],"names":["URI_PREFIX","NEW_SCANNED_DEVICE","NEW_NOTIFICATION","NEW_NOTIFICATION_ERROR","MDS","getIdxFromKey","key","idx","i","subscriptionKeys","length","subscribeToConnectedDevices","subscribedToConnectedDevices","connectedDevicesSubscription","subscribe","notification","data","JSON","parse","Method","Body","DeviceInfo","Serial","onDeviceConnected","onDeviceDisonnected","error","console","log","unsubscribe","scan","scanHandler","ReactMds","eventEmitter","addListener","name","address","handleNewNotification","handleNewNotificationError","e","subscriptionSuccessCallbacks","subscriptionErrorCallbacks","stopScan","removeAllListeners","setHandlers","deviceConnected","deviceDisconnected","connect","disconnect","get","serial","uri","contract","successCallback","errorCallback","gaurd","Platform","OS","stringify","_","r","put","post","delete","subscriptionKey","push","subscriptionKeyStr","toString","Uri","indexOf","splice","Error"],"mappings":"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","sourcesContent":["import { Platform } from 'react-native';\n\nimport ReactMds from './internal/nativeInterfaces';\nimport { ErrorCallback, SuccessCallback } from './internal/privateTypes';\n\nconst URI_PREFIX = 'suunto://';\nconst NEW_SCANNED_DEVICE = 'newScannedDevice';\nconst NEW_NOTIFICATION = 'newNotification';\nconst NEW_NOTIFICATION_ERROR = 'newNotificationError';\n\nexport type Notification = {\n  Method: 'POST' | 'DEL';\n  Body?: {\n    Serial: any;\n    DeviceInfo?: {\n      Serial: any;\n    };\n  };\n};\n\nexport type MDSEvent = {\n  key: number;\n  name: string;\n  address: string;\n  notification: string;\n};\n\nexport type ScanHandler = (name: string, address: string) => void;\nexport type DeviceConnectedHandler = (serial: string) => void;\n\nclass MDS {\n  private subscriptionKey: number = 0;\n  private subscriptionKeys: number[] = [];\n  private subscriptionSuccessCallbacks: SuccessCallback[] = [];\n  private subscriptionErrorCallbacks: ErrorCallback[] = [];\n\n  private subscribedToConnectedDevices = false;\n  private connectedDevicesSubscription = -1;\n\n  private onDeviceConnected: DeviceConnectedHandler | null = null;\n  private onDeviceDisonnected: DeviceConnectedHandler | null = null;\n\n  getIdxFromKey(key: number) {\n    var idx = -1;\n    for (var i = 0; i < this.subscriptionKeys.length; i++) {\n      if (this.subscriptionKeys[i] === key) {\n        idx = i;\n        break;\n      }\n    }\n    return idx;\n  }\n\n  subscribeToConnectedDevices() {\n    this.subscribedToConnectedDevices = true;\n    this.connectedDevicesSubscription = this.subscribe(\n      '',\n      'MDS/ConnectedDevices',\n      {},\n      (notification?: string) => {\n        if (notification == null) {\n          // is this possible?\n          return;\n        }\n\n        var data = JSON.parse(notification) as Notification;\n\n        if (data.Method === 'POST') {\n          if (data?.Body?.DeviceInfo?.Serial != null) {\n            this.onDeviceConnected &&\n              this.onDeviceConnected(data.Body.DeviceInfo.Serial);\n          } else if (data?.Body?.Serial != null) {\n            this.onDeviceConnected && this.onDeviceConnected(data.Body.Serial);\n          }\n        } else if (data.Method === 'DEL') {\n          if (data?.Body?.Serial != null) {\n            this.onDeviceDisonnected &&\n              this.onDeviceDisonnected(data.Body.Serial);\n          }\n        }\n      },\n      (error) => {\n        console.log('MDS subscribe error', error);\n        this.unsubscribe(this.connectedDevicesSubscription);\n        this.subscribedToConnectedDevices = false;\n      }\n    );\n  }\n\n  scan(scanHandler: ScanHandler) {\n    ReactMds.eventEmitter.addListener(\n      NEW_SCANNED_DEVICE,\n      ({ name, address }: MDSEvent) => {\n        scanHandler(name, address);\n      }\n    );\n    ReactMds.eventEmitter.addListener(\n      NEW_NOTIFICATION,\n      this.handleNewNotification\n    );\n    ReactMds.eventEmitter.addListener(\n      NEW_NOTIFICATION_ERROR,\n      this.handleNewNotificationError\n    );\n    ReactMds.scan();\n  }\n\n  handleNewNotification(e: MDSEvent) {\n    this.subscriptionSuccessCallbacks[this.getIdxFromKey(e.key)](\n      e.notification\n    );\n  }\n\n  handleNewNotificationError(e: MDSEvent) {\n    this.subscriptionErrorCallbacks[this.getIdxFromKey(e.key)](e.notification);\n  }\n\n  stopScan() {\n    ReactMds.eventEmitter.removeAllListeners(NEW_SCANNED_DEVICE);\n    ReactMds.eventEmitter.removeAllListeners(NEW_NOTIFICATION);\n    ReactMds.eventEmitter.removeAllListeners(NEW_NOTIFICATION_ERROR);\n\n    ReactMds.stopScan();\n  }\n\n  setHandlers(\n    deviceConnected: DeviceConnectedHandler,\n    deviceDisconnected: DeviceConnectedHandler\n  ) {\n    this.onDeviceConnected = deviceConnected;\n    this.onDeviceDisonnected = deviceDisconnected;\n    if (!this.subscribedToConnectedDevices) {\n      this.subscribedToConnectedDevices = true;\n      this.subscribeToConnectedDevices();\n    }\n  }\n\n  connect(address: string) {\n    ReactMds.connect(address);\n  }\n\n  disconnect(address: string) {\n    ReactMds.disconnect(address);\n  }\n\n  get(\n    serial: string,\n    uri: string,\n    contract: any,\n    successCallback: SuccessCallback,\n    errorCallback: ErrorCallback\n  ) {\n    this.gaurd(serial, uri, contract, successCallback, errorCallback);\n\n    if (Platform.OS === 'android') {\n      ReactMds.get(\n        URI_PREFIX + serial + uri,\n        JSON.stringify(contract),\n        successCallback,\n        errorCallback\n      );\n    } else {\n      ReactMds.get(\n        URI_PREFIX + serial + uri,\n        contract,\n        (_, r) => successCallback(r),\n        (_, r) => errorCallback(r)\n      );\n    }\n    return true;\n  }\n\n  put(\n    serial: string,\n    uri: string,\n    contract: any,\n    successCallback: SuccessCallback,\n    errorCallback: ErrorCallback\n  ) {\n    this.gaurd(serial, uri, contract, successCallback, errorCallback);\n\n    //! TODO: keep an eye\n    // This seems the opposite to get\n\n    if (Platform.OS === 'android') {\n      ReactMds.put(\n        URI_PREFIX + serial + uri,\n        JSON.stringify(contract),\n        (_, r) => successCallback(r),\n        (_, r) => errorCallback(r)\n      );\n    } else {\n      ReactMds.put(\n        URI_PREFIX + serial + uri,\n        contract,\n        successCallback,\n        errorCallback\n      );\n    }\n  }\n\n  post(\n    serial: string,\n    uri: string,\n    contract: any,\n    successCallback: SuccessCallback,\n    errorCallback: ErrorCallback\n  ) {\n    this.gaurd(serial, uri, contract, successCallback, errorCallback);\n\n    if (Platform.OS === 'android') {\n      ReactMds.post(\n        URI_PREFIX + serial + uri,\n        JSON.stringify(contract),\n        successCallback,\n        errorCallback\n      );\n    } else {\n      ReactMds.post(\n        URI_PREFIX + serial + uri,\n        contract,\n        successCallback,\n        errorCallback\n      );\n    }\n  }\n\n  delete(\n    serial: string,\n    uri: string,\n    contract: any,\n    successCallback: SuccessCallback,\n    errorCallback: ErrorCallback\n  ) {\n    this.gaurd(serial, uri, contract, successCallback, errorCallback);\n\n    if (Platform.OS === 'android') {\n      ReactMds.delete(\n        URI_PREFIX + serial + uri,\n        JSON.stringify(contract),\n        successCallback,\n        errorCallback\n      );\n    } else {\n      ReactMds.delete(\n        URI_PREFIX + serial + uri,\n        contract,\n        successCallback,\n        errorCallback\n      );\n    }\n  }\n\n  subscribe(\n    serial: string,\n    uri: string,\n    contract: any,\n    successCallback: SuccessCallback,\n    errorCallback: ErrorCallback\n  ) {\n    this.gaurd(serial, uri, contract, successCallback, errorCallback);\n\n    this.subscriptionKey++;\n    this.subscriptionKeys.push(this.subscriptionKey);\n    this.subscriptionSuccessCallbacks.push(successCallback);\n    this.subscriptionErrorCallbacks.push(errorCallback);\n\n    const subscriptionKeyStr = this.subscriptionKey.toString();\n\n    if (Platform.OS === 'android') {\n      contract.Uri = serial + uri;\n      ReactMds.subscribe(\n        'suunto://MDS/EventListener',\n        JSON.stringify(contract),\n        subscriptionKeyStr\n      );\n    } else {\n      ReactMds.subscribe(\n        URI_PREFIX + serial + uri,\n        contract,\n        subscriptionKeyStr\n      );\n    }\n\n    return this.subscriptionKey;\n  }\n\n  unsubscribe(key: number) {\n    var idx = this.subscriptionKeys.indexOf(key);\n    if (idx === -1) {\n      return false;\n    }\n\n    ReactMds.unsubscribe(key.toString());\n    this.subscriptionKeys.splice(idx, 0);\n    this.subscriptionSuccessCallbacks.splice(idx, 0);\n    this.subscriptionErrorCallbacks.splice(idx, 0);\n    return true;\n  }\n\n  gaurd(\n    serial: string,\n    uri: string,\n    contract: any,\n    successCallback: SuccessCallback,\n    errorCallback: ErrorCallback\n  ) {\n    if (\n      serial == null ||\n      uri == null ||\n      contract == null ||\n      successCallback == null ||\n      errorCallback == null\n    ) {\n      throw new Error('Arguments missing');\n    }\n  }\n}\n\nexport default new MDS();\n"]}